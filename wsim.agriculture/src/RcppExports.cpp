// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// aggregate_sum
Rcpp::NumericMatrix aggregate_sum(const Rcpp::NumericMatrix& mat, int factor);
RcppExport SEXP _wsim_agriculture_aggregate_sum(SEXP matSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type factor(factorSEXP);
    rcpp_result_gen = Rcpp::wrap(aggregate_sum(mat, factor));
    return rcpp_result_gen;
END_RCPP
}
// aggregate_mean
Rcpp::NumericMatrix aggregate_mean(const Rcpp::NumericMatrix& mat, int factor);
RcppExport SEXP _wsim_agriculture_aggregate_mean(SEXP matSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type factor(factorSEXP);
    rcpp_result_gen = Rcpp::wrap(aggregate_mean(mat, factor));
    return rcpp_result_gen;
END_RCPP
}
// aggregate_mean_doy
Rcpp::NumericMatrix aggregate_mean_doy(const Rcpp::NumericMatrix& mat, int factor);
RcppExport SEXP _wsim_agriculture_aggregate_mean_doy(SEXP matSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type factor(factorSEXP);
    rcpp_result_gen = Rcpp::wrap(aggregate_mean_doy(mat, factor));
    return rcpp_result_gen;
END_RCPP
}
// is_growing_season
Rcpp::LogicalVector is_growing_season(int day_of_year, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_is_growing_season(SEXP day_of_yearSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type day_of_year(day_of_yearSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(is_growing_season(day_of_year, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// days_since_planting
Rcpp::IntegerVector days_since_planting(const Rcpp::IntegerVector& day_of_year, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_days_since_planting(SEXP day_of_yearSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type day_of_year(day_of_yearSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(days_since_planting(day_of_year, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// days_until_harvest
Rcpp::IntegerVector days_until_harvest(const Rcpp::IntegerVector& day_of_year, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_days_until_harvest(SEXP day_of_yearSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type day_of_year(day_of_yearSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(days_until_harvest(day_of_year, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// first_growing_day
Rcpp::IntegerVector first_growing_day(int from, int to, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_first_growing_day(SEXP fromSEXP, SEXP toSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(first_growing_day(from, to, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// last_growing_day
Rcpp::IntegerVector last_growing_day(int from, int to, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_last_growing_day(SEXP fromSEXP, SEXP toSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(last_growing_day(from, to, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// growing_days_this_season
Rcpp::IntegerVector growing_days_this_season(int from, int to, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_growing_days_this_season(SEXP fromSEXP, SEXP toSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(growing_days_this_season(from, to, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// growing_days_this_year
Rcpp::IntegerVector growing_days_this_year(int from, int to, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_growing_days_this_year(SEXP fromSEXP, SEXP toSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(growing_days_this_year(from, to, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// growing_days_next_year
Rcpp::IntegerVector growing_days_next_year(int from, int to, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_growing_days_next_year(SEXP fromSEXP, SEXP toSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(growing_days_next_year(from, to, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// days_since_planting_this_year
Rcpp::IntegerVector days_since_planting_this_year(int from, int to, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_days_since_planting_this_year(SEXP fromSEXP, SEXP toSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(days_since_planting_this_year(from, to, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// days_since_planting_next_year
Rcpp::IntegerVector days_since_planting_next_year(int from, int to, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_days_since_planting_next_year(SEXP fromSEXP, SEXP toSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(days_since_planting_next_year(from, to, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// days_since_planting_this_season
Rcpp::IntegerVector days_since_planting_this_season(int from, int to, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_days_since_planting_this_season(SEXP fromSEXP, SEXP toSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(days_since_planting_this_season(from, to, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// planted_for_this_year
Rcpp::LogicalVector planted_for_this_year(int from, int to, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_planted_for_this_year(SEXP fromSEXP, SEXP toSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(planted_for_this_year(from, to, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// planted_for_next_year
Rcpp::LogicalVector planted_for_next_year(int from, int to, const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_planted_for_next_year(SEXP fromSEXP, SEXP toSEXP, SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(planted_for_next_year(from, to, plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// growing_season_length
Rcpp::IntegerVector growing_season_length(const Rcpp::IntegerVector& plant_date, const Rcpp::IntegerVector& harvest_date);
RcppExport SEXP _wsim_agriculture_growing_season_length(SEXP plant_dateSEXP, SEXP harvest_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type plant_date(plant_dateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type harvest_date(harvest_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(growing_season_length(plant_date, harvest_date));
    return rcpp_result_gen;
END_RCPP
}
// disaggregate
Rcpp::NumericMatrix disaggregate(const Rcpp::NumericMatrix& mat, int factor);
RcppExport SEXP _wsim_agriculture_disaggregate(SEXP matSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type factor(factorSEXP);
    rcpp_result_gen = Rcpp::wrap(disaggregate(mat, factor));
    return rcpp_result_gen;
END_RCPP
}
// disaggregate_pfun
Rcpp::NumericMatrix disaggregate_pfun(const Rcpp::NumericMatrix& m1, const Rcpp::NumericMatrix& m2, const std::string& op, bool na_rm);
RcppExport SEXP _wsim_agriculture_disaggregate_pfun(SEXP m1SEXP, SEXP m2SEXP, SEXP opSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type op(opSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(disaggregate_pfun(m1, m2, op, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// loss_function
Rcpp::NumericVector loss_function(const Rcpp::NumericVector& rp, double rp_onset, double rp_total, double power);
RcppExport SEXP _wsim_agriculture_loss_function(SEXP rpSEXP, SEXP rp_onsetSEXP, SEXP rp_totalSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< double >::type rp_onset(rp_onsetSEXP);
    Rcpp::traits::input_parameter< double >::type rp_total(rp_totalSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(loss_function(rp, rp_onset, rp_total, power));
    return rcpp_result_gen;
END_RCPP
}
// mean_doy
Rcpp::IntegerVector mean_doy(Rcpp::NumericVector x);
RcppExport SEXP _wsim_agriculture_mean_doy(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_doy(x));
    return rcpp_result_gen;
END_RCPP
}
// parse_mirca_condensed_crop_calendar
Rcpp::DataFrame parse_mirca_condensed_crop_calendar(std::string filename, int header_lines);
RcppExport SEXP _wsim_agriculture_parse_mirca_condensed_crop_calendar(SEXP filenameSEXP, SEXP header_linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int >::type header_lines(header_linesSEXP);
    rcpp_result_gen = Rcpp::wrap(parse_mirca_condensed_crop_calendar(filename, header_lines));
    return rcpp_result_gen;
END_RCPP
}
// reclassify
Rcpp::NumericVector reclassify(const Rcpp::NumericVector& x, const Rcpp::NumericMatrix& reclass, bool na_default);
RcppExport SEXP _wsim_agriculture_reclassify(SEXP xSEXP, SEXP reclassSEXP, SEXP na_defaultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type reclass(reclassSEXP);
    Rcpp::traits::input_parameter< bool >::type na_default(na_defaultSEXP);
    rcpp_result_gen = Rcpp::wrap(reclassify(x, reclass, na_default));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wsim_agriculture_aggregate_sum", (DL_FUNC) &_wsim_agriculture_aggregate_sum, 2},
    {"_wsim_agriculture_aggregate_mean", (DL_FUNC) &_wsim_agriculture_aggregate_mean, 2},
    {"_wsim_agriculture_aggregate_mean_doy", (DL_FUNC) &_wsim_agriculture_aggregate_mean_doy, 2},
    {"_wsim_agriculture_is_growing_season", (DL_FUNC) &_wsim_agriculture_is_growing_season, 3},
    {"_wsim_agriculture_days_since_planting", (DL_FUNC) &_wsim_agriculture_days_since_planting, 3},
    {"_wsim_agriculture_days_until_harvest", (DL_FUNC) &_wsim_agriculture_days_until_harvest, 3},
    {"_wsim_agriculture_first_growing_day", (DL_FUNC) &_wsim_agriculture_first_growing_day, 4},
    {"_wsim_agriculture_last_growing_day", (DL_FUNC) &_wsim_agriculture_last_growing_day, 4},
    {"_wsim_agriculture_growing_days_this_season", (DL_FUNC) &_wsim_agriculture_growing_days_this_season, 4},
    {"_wsim_agriculture_growing_days_this_year", (DL_FUNC) &_wsim_agriculture_growing_days_this_year, 4},
    {"_wsim_agriculture_growing_days_next_year", (DL_FUNC) &_wsim_agriculture_growing_days_next_year, 4},
    {"_wsim_agriculture_days_since_planting_this_year", (DL_FUNC) &_wsim_agriculture_days_since_planting_this_year, 4},
    {"_wsim_agriculture_days_since_planting_next_year", (DL_FUNC) &_wsim_agriculture_days_since_planting_next_year, 4},
    {"_wsim_agriculture_days_since_planting_this_season", (DL_FUNC) &_wsim_agriculture_days_since_planting_this_season, 4},
    {"_wsim_agriculture_planted_for_this_year", (DL_FUNC) &_wsim_agriculture_planted_for_this_year, 4},
    {"_wsim_agriculture_planted_for_next_year", (DL_FUNC) &_wsim_agriculture_planted_for_next_year, 4},
    {"_wsim_agriculture_growing_season_length", (DL_FUNC) &_wsim_agriculture_growing_season_length, 2},
    {"_wsim_agriculture_disaggregate", (DL_FUNC) &_wsim_agriculture_disaggregate, 2},
    {"_wsim_agriculture_disaggregate_pfun", (DL_FUNC) &_wsim_agriculture_disaggregate_pfun, 4},
    {"_wsim_agriculture_loss_function", (DL_FUNC) &_wsim_agriculture_loss_function, 4},
    {"_wsim_agriculture_mean_doy", (DL_FUNC) &_wsim_agriculture_mean_doy, 1},
    {"_wsim_agriculture_parse_mirca_condensed_crop_calendar", (DL_FUNC) &_wsim_agriculture_parse_mirca_condensed_crop_calendar, 2},
    {"_wsim_agriculture_reclassify", (DL_FUNC) &_wsim_agriculture_reclassify, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_wsim_agriculture(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
