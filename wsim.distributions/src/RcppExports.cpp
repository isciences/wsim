// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// stack_sum
NumericVector stack_sum(const NumericVector& v);
RcppExport SEXP _wsim_distributions_stack_sum(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_sum(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_mean
NumericVector stack_mean(const NumericVector& v);
RcppExport SEXP _wsim_distributions_stack_mean(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_mean(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_min
NumericVector stack_min(const NumericVector& v);
RcppExport SEXP _wsim_distributions_stack_min(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_min(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_which_min
NumericVector stack_which_min(const NumericVector& v);
RcppExport SEXP _wsim_distributions_stack_which_min(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_which_min(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_max
NumericVector stack_max(const NumericVector& v);
RcppExport SEXP _wsim_distributions_stack_max(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_max(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_which_max
NumericVector stack_which_max(const NumericVector& v);
RcppExport SEXP _wsim_distributions_stack_which_max(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_which_max(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_num_defined
NumericVector stack_num_defined(const NumericVector& v);
RcppExport SEXP _wsim_distributions_stack_num_defined(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_num_defined(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_frac_defined
NumericVector stack_frac_defined(const NumericVector& v);
RcppExport SEXP _wsim_distributions_stack_frac_defined(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_frac_defined(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_frac_defined_above_zero
NumericVector stack_frac_defined_above_zero(const NumericVector& v);
RcppExport SEXP _wsim_distributions_stack_frac_defined_above_zero(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_frac_defined_above_zero(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_quantile
NumericVector stack_quantile(const NumericVector& v, double q);
RcppExport SEXP _wsim_distributions_stack_quantile(SEXP vSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_quantile(v, q));
    return rcpp_result_gen;
END_RCPP
}
// stack_weighted_quantile
NumericVector stack_weighted_quantile(const NumericVector& v, const NumericVector& w, double q);
RcppExport SEXP _wsim_distributions_stack_weighted_quantile(SEXP vSEXP, SEXP wSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_weighted_quantile(v, w, q));
    return rcpp_result_gen;
END_RCPP
}
// stack_weighted_mean
NumericVector stack_weighted_mean(const NumericVector& v, const NumericVector& w);
RcppExport SEXP _wsim_distributions_stack_weighted_mean(SEXP vSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_weighted_mean(v, w));
    return rcpp_result_gen;
END_RCPP
}
// stack_median
NumericVector stack_median(const NumericVector& v);
RcppExport SEXP _wsim_distributions_stack_median(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_median(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_sort
NumericVector stack_sort(const NumericVector& v);
RcppExport SEXP _wsim_distributions_stack_sort(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_sort(v));
    return rcpp_result_gen;
END_RCPP
}
// stack_select
NumericVector stack_select(const NumericVector& v, const NumericVector& start, const IntegerVector& n, const SEXP& fill);
RcppExport SEXP _wsim_distributions_stack_select(SEXP vSEXP, SEXP startSEXP, SEXP nSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_select(v, start, n, fill));
    return rcpp_result_gen;
END_RCPP
}
// stack_min_rank
NumericVector stack_min_rank(const NumericVector& x, const NumericVector& obs);
RcppExport SEXP _wsim_distributions_stack_min_rank(SEXP xSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_min_rank(x, obs));
    return rcpp_result_gen;
END_RCPP
}
// stack_max_rank
NumericVector stack_max_rank(const NumericVector& x, const NumericVector& obs);
RcppExport SEXP _wsim_distributions_stack_max_rank(SEXP xSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_max_rank(x, obs));
    return rcpp_result_gen;
END_RCPP
}
// quape3
NumericVector quape3(const NumericVector& x, const NumericVector& location, const NumericVector& scale, const NumericVector& shape);
RcppExport SEXP _wsim_distributions_quape3(SEXP xSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(quape3(x, location, scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// quagev
NumericVector quagev(const NumericVector& x, const NumericVector& location, const NumericVector& scale, const NumericVector& shape);
RcppExport SEXP _wsim_distributions_quagev(SEXP xSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(quagev(x, location, scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// cdfpe3
NumericVector cdfpe3(const NumericVector& x, const NumericVector& location, const NumericVector& scale, const NumericVector& shape);
RcppExport SEXP _wsim_distributions_cdfpe3(SEXP xSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(cdfpe3(x, location, scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// cdfgev
NumericVector cdfgev(const NumericVector& x, const NumericVector& location, const NumericVector& scale, const NumericVector& shape);
RcppExport SEXP _wsim_distributions_cdfgev(SEXP xSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(cdfgev(x, location, scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// gev_forecast_correct
NumericMatrix gev_forecast_correct(const NumericMatrix& data, const NumericMatrix& obs_location, const NumericMatrix& obs_scale, const NumericMatrix& obs_shape, const NumericMatrix& retro_location, const NumericMatrix& retro_scale, const NumericMatrix& retro_shape, double extreme_cutoff, double when_dist_undefined);
RcppExport SEXP _wsim_distributions_gev_forecast_correct(SEXP dataSEXP, SEXP obs_locationSEXP, SEXP obs_scaleSEXP, SEXP obs_shapeSEXP, SEXP retro_locationSEXP, SEXP retro_scaleSEXP, SEXP retro_shapeSEXP, SEXP extreme_cutoffSEXP, SEXP when_dist_undefinedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type obs_location(obs_locationSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type obs_scale(obs_scaleSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type obs_shape(obs_shapeSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type retro_location(retro_locationSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type retro_scale(retro_scaleSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type retro_shape(retro_shapeSEXP);
    Rcpp::traits::input_parameter< double >::type extreme_cutoff(extreme_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type when_dist_undefined(when_dist_undefinedSEXP);
    rcpp_result_gen = Rcpp::wrap(gev_forecast_correct(data, obs_location, obs_scale, obs_shape, retro_location, retro_scale, retro_shape, extreme_cutoff, when_dist_undefined));
    return rcpp_result_gen;
END_RCPP
}
// pe3_forecast_correct
NumericMatrix pe3_forecast_correct(const NumericMatrix& data, const NumericMatrix& obs_location, const NumericMatrix& obs_scale, const NumericMatrix& obs_shape, const NumericMatrix& retro_location, const NumericMatrix& retro_scale, const NumericMatrix& retro_shape, double extreme_cutoff, double when_dist_undefined);
RcppExport SEXP _wsim_distributions_pe3_forecast_correct(SEXP dataSEXP, SEXP obs_locationSEXP, SEXP obs_scaleSEXP, SEXP obs_shapeSEXP, SEXP retro_locationSEXP, SEXP retro_scaleSEXP, SEXP retro_shapeSEXP, SEXP extreme_cutoffSEXP, SEXP when_dist_undefinedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type obs_location(obs_locationSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type obs_scale(obs_scaleSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type obs_shape(obs_shapeSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type retro_location(retro_locationSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type retro_scale(retro_scaleSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type retro_shape(retro_shapeSEXP);
    Rcpp::traits::input_parameter< double >::type extreme_cutoff(extreme_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type when_dist_undefined(when_dist_undefinedSEXP);
    rcpp_result_gen = Rcpp::wrap(pe3_forecast_correct(data, obs_location, obs_scale, obs_shape, retro_location, retro_scale, retro_shape, extreme_cutoff, when_dist_undefined));
    return rcpp_result_gen;
END_RCPP
}
// wsim_quantile
double wsim_quantile(const NumericVector& v, double q);
RcppExport SEXP _wsim_distributions_wsim_quantile(SEXP vSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(wsim_quantile(v, q));
    return rcpp_result_gen;
END_RCPP
}
// substitute
NumericVector substitute(const NumericVector& vals, const NumericVector& subs);
RcppExport SEXP _wsim_distributions_substitute(SEXP valsSEXP, SEXP subsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type subs(subsSEXP);
    rcpp_result_gen = Rcpp::wrap(substitute(vals, subs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wsim_distributions_stack_sum", (DL_FUNC) &_wsim_distributions_stack_sum, 1},
    {"_wsim_distributions_stack_mean", (DL_FUNC) &_wsim_distributions_stack_mean, 1},
    {"_wsim_distributions_stack_min", (DL_FUNC) &_wsim_distributions_stack_min, 1},
    {"_wsim_distributions_stack_which_min", (DL_FUNC) &_wsim_distributions_stack_which_min, 1},
    {"_wsim_distributions_stack_max", (DL_FUNC) &_wsim_distributions_stack_max, 1},
    {"_wsim_distributions_stack_which_max", (DL_FUNC) &_wsim_distributions_stack_which_max, 1},
    {"_wsim_distributions_stack_num_defined", (DL_FUNC) &_wsim_distributions_stack_num_defined, 1},
    {"_wsim_distributions_stack_frac_defined", (DL_FUNC) &_wsim_distributions_stack_frac_defined, 1},
    {"_wsim_distributions_stack_frac_defined_above_zero", (DL_FUNC) &_wsim_distributions_stack_frac_defined_above_zero, 1},
    {"_wsim_distributions_stack_quantile", (DL_FUNC) &_wsim_distributions_stack_quantile, 2},
    {"_wsim_distributions_stack_weighted_quantile", (DL_FUNC) &_wsim_distributions_stack_weighted_quantile, 3},
    {"_wsim_distributions_stack_weighted_mean", (DL_FUNC) &_wsim_distributions_stack_weighted_mean, 2},
    {"_wsim_distributions_stack_median", (DL_FUNC) &_wsim_distributions_stack_median, 1},
    {"_wsim_distributions_stack_sort", (DL_FUNC) &_wsim_distributions_stack_sort, 1},
    {"_wsim_distributions_stack_select", (DL_FUNC) &_wsim_distributions_stack_select, 4},
    {"_wsim_distributions_stack_min_rank", (DL_FUNC) &_wsim_distributions_stack_min_rank, 2},
    {"_wsim_distributions_stack_max_rank", (DL_FUNC) &_wsim_distributions_stack_max_rank, 2},
    {"_wsim_distributions_quape3", (DL_FUNC) &_wsim_distributions_quape3, 4},
    {"_wsim_distributions_quagev", (DL_FUNC) &_wsim_distributions_quagev, 4},
    {"_wsim_distributions_cdfpe3", (DL_FUNC) &_wsim_distributions_cdfpe3, 4},
    {"_wsim_distributions_cdfgev", (DL_FUNC) &_wsim_distributions_cdfgev, 4},
    {"_wsim_distributions_gev_forecast_correct", (DL_FUNC) &_wsim_distributions_gev_forecast_correct, 9},
    {"_wsim_distributions_pe3_forecast_correct", (DL_FUNC) &_wsim_distributions_pe3_forecast_correct, 9},
    {"_wsim_distributions_wsim_quantile", (DL_FUNC) &_wsim_distributions_wsim_quantile, 2},
    {"_wsim_distributions_substitute", (DL_FUNC) &_wsim_distributions_substitute, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_wsim_distributions(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
