Workflow and Data Management
============================

A primary use of WSIM is to generate composite indicators of overall water surplus and deficit at a variety of time integration periods.
Production of these indicators typically requires many different calls to command-line tools and generation of numerous intermediate files.
To simplify the process  of composite indicator production, WSIM provides a workflow tool that can be used to produce a directed acyclic graph (DAG) representation of intermediate files and the commands used to create them.
The DAG can then be output to a Makefile, which can be executed to produce the desired outputs.

.. NOTE::
  Generated Makefiles are not intended to be human-readable, and may contain hundreds of thousands of lines describing targets and dependencies.

Data Workspace
--------------

By default, the workflow tool assumes that various WSIM files will be organized into a workspace folder. The workspace contains all files generated by WSIM for a particular model instance, including spin-up, forcing, results, and summary data. The workspace folder contains a ``Makefile`` at its root and the subdirectories listed below:

The ``forcing`` directory
^^^^^^^^^^^^^^^^^^^^^^^^^

The ``forcing`` directory contains model inputs in the netCDF format used by ``wsim_lsm``. These may be of two types:

* Forcing files for observed data are stored with filenames of the format ``forcing_YYYYMM.nc``.
* Forcing files for forecast data are stored with the filenames of the format ``forcing_YYYYMM_trgtYYYYMM_fcstNAME.nc`` where the two dates refer to (1) the month the forecast was generated, and (2) the month to which the forecast applies, and ``NAME`` refers to the ensemble member name. For example, forcing data for a forecast ensemble member ``2015052812`` generated in May 2015 and predicting conditions in August 2015 would be named ``forcing_201505_trgt201508_fcst2015052812.nc``.

The ``state`` directory
^^^^^^^^^^^^^^^^^^^^^^^

The ``state`` directory contains files storing model states in the netCDF format used by ``wsim_lsm``. Model state files follow the same naming convention as the forcing files, with ``forcing`` replaced by ``state`` in the filename.

The ``results`` directory
^^^^^^^^^^^^^^^^^^^^^^^^^

The ``results`` directory contains files storing model results in the netCDF format generated by ``wsim_lsm``. Model result files follow a similar naming convention to the forcing files, with an extension to indicate time-integrated data. Result filenames for time-integrated data have the format ``results_Xmo_YYYYMM_trgtYYYYMM_fcstNAME.nc``. (the ``trgt`` and ``fcst`` section are omitted for results generated from observed rather than forecast data).

The ``rp`` directory
^^^^^^^^^^^^^^^^^^^^

Files in the ``rp`` directory contain model results expressed as a return period. File and variable naming conventions are equivalent to the results files, with ``results`` replaced by ``rp`` in the filename.

The ``spinup`` directory
^^^^^^^^^^^^^^^^^^^^^^^^

The ``spinup`` directory contains various files generated during the model spinup process, including climate norms, forcing files of climate norms, model states generated by forcing with climate norms, etc.

The ``summary`` directory
^^^^^^^^^^^^^^^^^^^^^^^^^
Files in the ``summary`` directory contain summaries of model results and return periods across the members of a forecast ensemble. Model result summaries are named in the format ``results_summary_Xmo_YYYYMM_trgtYYYYMM``, with the ``trgt`` section omitted for results generated from observed rather than forecast data. Return period summaries are named in the same convention, with ``results`` replaced by ``rp``.

The ``composite`` directory
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Files in the ``composite`` directory contain composite indicators of overall surplus and deficit. File names have the format ``composite_summary_Xmo_YYYYMM_trgtYYYYMM.nc``, with the ``Xmo`` section omitted for data that has not been time-integrated, and the ``trgt`` section omitted for results generated from observed rather than forecast data. Composite indicators are not generated for individual forecast ensemble members.

Starting a New Model Instance
*****************************

The Python script ``makemake.py`` can be used to generate a Makefile that will run the model for a single iteration, including all spin-up procedures required before the specified iteration can be performed. After a model has been spun up, subsequent model iterations can be performed within the same workspace by calling ``makemake.py`` again and overwriting the Makefile.

An example usage of ``makemake.py`` is as follows:

.. code-block:: console

    python3 workflow/makemake.py --bindir /wsim --config workflow/config_cfs.py --source /mnt/WSIM/WSIM_source_V1.2 --workspace /mnt/WSIM/workspaces/oct26 --start 201701

This will create the file ``/mnt/WSIM/workspaces/oct26/Makefile`` with instructions for performing a model spinup and generating composite indicators from January 2017 observed and forecast data. Subsequent model iterations (February 2017, March 2017, etc.) can be run by writing a new Makefile into the same workspace.

Configuration needed by the Makefile generator is provided by a Python file with information such as:

* raw data locations
* availability of historical data
* time period to use for fitting historical norms (e.g., 1950-2009)
* time integration windows (3 months, 24 months, etc.)
* statistics to compute for time-integrated results (e.g., ``Bt_RO_max``, ``Ws_ave``, etc.)
* forecast target dates
* forecast ensemble members

.. WARNING::
  Documentation for the format of the configuration file is not yet provided, as the format is under rapid development. However, example configurations are available in the ``config_cfs.py`` and ``config_nldas.py`` files.
